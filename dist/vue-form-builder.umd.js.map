{"version":3,"file":"vue-form-builder.umd.js","sources":["../src/components/FormGenerator.vue","../src/components/FormGeneratorError.vue","../src/components/FormBuilder.vue","../src/components/FormGeneratorFormField.vue","../src/components/FormGeneratorLabel.vue","../src/components/FormGeneratorHelp.vue","../src/components/FormGeneratorCheckbox.vue","../src/components/FormGeneratorCollection.vue","../src/components/FormGeneratorDivider.vue","../src/components/FormGeneratorInput.vue","../src/components/FormGeneratorRadio.vue","../src/components/FormGeneratorSelect.vue","../src/components/FormGeneratorTextarea.vue","../src/utilities/form-data.ts"],"sourcesContent":["<template>\n  <div class=\"form-generator\">\n    <component\n      :is=\"field.type\"\n      v-for=\"(field, index) in schema\"\n      :key=\"index\"\n      :value=\"getFieldValue(field)\"\n      :errors=\"getFieldErrors(field)\"\n      v-bind=\"getFieldProps(field)\"\n      class=\"form-generator__field\"\n      @update:value=\"onFieldUpdate(field, $event)\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\nimport get from 'lodash/get'\nimport set from 'lodash/set'\nimport cloneDeep from 'lodash/cloneDeep'\nimport kebabCase from 'lodash/kebabCase'\n\nimport { Schema, Errors, Model, SchemaField, SchemaFieldParams, ErrorMessages } from '../types'\n\nexport default Vue.extend({\n  name: 'FormGenerator',\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    model: {\n      type: Object as () => Model,\n      required: true\n    },\n    schema: {\n      type: Array as () => Schema,\n      required: true\n    },\n    errors: {\n      type: Object as () => Errors,\n      default: () => ({})\n    }\n  },\n  methods: {\n    getFieldValue (field: SchemaField): unknown {\n      return get(this.model, field.path)\n    },\n    getFieldErrors (field: SchemaField): ErrorMessages | Errors {\n      return get(this.errors, field.path)\n    },\n    getFieldProps (field: SchemaField): SchemaFieldParams {\n      const fieldParams = cloneDeep(field.params)\n\n      // Merge form id with field id\n      const fieldId = fieldParams.id || kebabCase(field.path)\n      fieldParams.id = `${this.id}-${fieldId}`\n\n      return fieldParams\n    },\n    onFieldUpdate (field: SchemaField, value: unknown) {\n      const model = cloneDeep(this.model)\n\n      set(model, field.path, value)\n\n      this.$emit('update:model', model)\n    }\n  }\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.form-generator {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n\n  &__field {\n    flex-basis: 100%;\n\n    &.half {\n      flex-basis: calc(50% - 8px);\n    }\n  }\n}\n</style>\n","<template>\n  <div\n    v-if=\"firstError\"\n    class=\"form-generator-error\"\n  >\n    {{ firstError }}\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\n\nimport { ErrorMessages } from '../types'\n\nexport default Vue.extend({\n  name: 'FormGeneratorError',\n  props: {\n    errors: {\n      type: Array as () => ErrorMessages,\n      default: () => []\n    }\n  },\n  computed: {\n    firstError (): string | null {\n      return this.errors[0] || null\n    }\n  }\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.form-generator-error {\n  font-size: 14px;\n  letter-spacing: 0.24px;\n  margin-top: 5px;\n  color: #b13232;\n}\n</style>\n","<template>\n  <form\n    :id=\"builderId\"\n    :autocomplete=\"autocomplete\"\n    class=\"form-builder\"\n    @keyup.enter=\"onFormEnter\"\n  >\n    <form-generator-error\n      slot=\"error\"\n      :errors=\"firstGlobalError\"\n      class=\"form-builder__error\"\n    />\n    <form-generator\n      :id=\"generatorId\"\n      :model=\"generatorModel\"\n      :schema=\"generatorSchema\"\n      :errors=\"generatorErrors\"\n      class=\"form-builder__fields\"\n      @update:model=\"onModelUpdate\"\n    />\n    <div\n      :class=\"`form-builder__actions--${actionsAlign}`\"\n      class=\"form-builder__actions actions\"\n    >\n      <slot name=\"actions\">\n        <button\n          type=\"button\"\n          class=\"actions__submit-btn form-btn\"\n          @click.prevent=\"onSubmitBtnClick\"\n        >\n          {{ submitButtonLabel }}\n        </button>\n      </slot>\n    </div>\n  </form>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\nimport kebabCase from 'lodash/kebabCase'\nimport isArray from 'lodash/isArray'\nimport has from 'lodash/has'\n\nimport { Schema, Errors, Model, ErrorMessages } from '../types'\n\nimport FormGenerator from './FormGenerator.vue'\nimport FormGeneratorError from './FormGeneratorError.vue'\n\nexport default Vue.extend({\n  name: 'FormBuilder',\n  components: {\n    FormGenerator,\n    FormGeneratorError\n  },\n  props: {\n    model: {\n      type: Object as () => Model,\n      required: true\n    },\n    schema: {\n      type: Array as () => Schema,\n      required: true\n    },\n    errors: {\n      type: Object as () => Errors,\n      default: () => ({})\n    },\n    id: {\n      type: String,\n      required: true\n    },\n    autocomplete: {\n      type: String,\n      default: 'on'\n    },\n    actionsAlign: {\n      type: String as () => ('right' | 'left' | 'center'),\n      default: 'right',\n      validator (value: unknown) {\n        return ['right', 'left', 'center'].includes(`${value}`)\n      }\n    },\n    submitButtonLabel: {\n      type: String,\n      default: 'Submit'\n    }\n  },\n  computed: {\n    generatorModel (): Model {\n      return this.model\n    },\n    generatorSchema (): Schema {\n      return this.schema\n    },\n    generatorErrors (): Errors {\n      return this.errors\n    },\n    generatorId (): string {\n      return this.builderId\n    },\n    builderId (): string {\n      return kebabCase(this.id)\n    },\n    firstGlobalError (): ErrorMessages {\n      if (has(this.errors, 0)) {\n        return isArray(this.errors[0]) ? this.errors[0] : []\n      } else if (has(this.errors, '0')) {\n        return isArray(this.errors['0']) ? this.errors['0'] : []\n      }\n\n      return []\n    }\n  },\n  methods: {\n    onModelUpdate (model: Model) {\n      this.$emit('update:model', model)\n    },\n    onSubmitBtnClick () {\n      this.$emit('submit', { model: this.model })\n    },\n    onFormEnter () {\n      this.$emit('submit', { model: this.model })\n    }\n  }\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.form-builder {\n  &__error {\n    padding: 0 45px;\n    margin-bottom: 15px;\n    text-align: center;\n  }\n\n  &__actions {\n    display: flex;\n    justify-content: flex-end;\n    flex-wrap: wrap;\n    margin-bottom: -15px;\n\n    &--left {\n      justify-content: flex-start;\n    }\n\n    &--center {\n      justify-content: center;\n    }\n\n    &--rigth {\n      justify-content: flex-end;\n    }\n\n    .form-btn {\n      display: block;\n      width: 200px;\n      height: 40px;\n      border-radius: 100px;\n      background-image: linear-gradient(to left, #ff6200, #ff7d00);\n      font-size: 14px;\n      font-weight: bold;\n      letter-spacing: 0.88px;\n      color: #fff;\n      text-transform: uppercase;\n      text-align: center;\n      border: none;\n      margin-left: 15px;\n      margin-bottom: 15px;\n      cursor: pointer;\n    }\n  }\n}\n</style>\n","<template>\n  <div\n    :class=\"className\"\n    class=\"form-generator-form-field\"\n  >\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\n\nexport default Vue.extend({\n  name: 'FormGeneratorFormField',\n  props: {\n    className: {\n      type: String,\n      default: ''\n    }\n  }\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.form-generator-form-field {\n  margin-bottom: 15px;\n}\n</style>\n","<template>\n  <label\n    v-if=\"label\"\n    :for=\"forInput\"\n    class=\"form-generator-label\"\n  >\n    {{ label }} <span v-if=\"required\">*</span>\n  </label>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\n\nexport default Vue.extend({\n  name: 'FormGeneratorLabel',\n  props: {\n    forInput: {\n      type: String,\n      required: true\n    },\n    label: {\n      type: String,\n      required: true\n    },\n    required: {\n      type: Boolean,\n      default: true\n    }\n  }\n})\n</script>\n\n<style lang=\"scss\">\n.form-generator-label {\n  display: block;\n  font-size: 14px;\n  font-weight: 500;\n  letter-spacing: 0.3px;\n  margin-bottom: 5px;\n}\n</style>\n","<template>\n  <div\n    v-if=\"help\"\n    class=\"form-generator-help\"\n  >\n    {{ help }}\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\n\nexport default Vue.extend({\n  name: 'FormGeneratorHelp',\n  props: {\n    help: {\n      type: String,\n      default: ''\n    }\n  }\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.form-generator-help {\n  font-size: 11px;\n  opacity: 0.5;\n  letter-spacing: 0.24px;\n  margin-top: 5px;\n}\n</style>\n","<template>\n  <form-generator-form-field\n    :class-name=\"formGroupClassName\"\n    class=\"form-generator-checkbox\"\n  >\n    <form-generator-label\n      :for-input=\"id\"\n      :label=\"label\"\n      :required=\"required\"\n    />\n    <label class=\"form-generator-checkbox__checkbox checkbox\">\n      <input\n        :id=\"id\"\n        :checked=\"checked\"\n        :disabled=\"disabled\"\n        type=\"checkbox\"\n        name=\"isSubscribed\"\n        class=\"checkbox__input\"\n        @change=\"onChange\"\n      >\n      <label\n        :for=\"id\"\n        class=\"checkbox__label\"\n      >\n        {{ text }}\n      </label>\n    </label>\n    <form-generator-help\n      :help=\"help\"\n    />\n    <form-generator-error\n      :errors=\"errors\"\n    />\n  </form-generator-form-field>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\n\nimport { ErrorMessages } from '../types'\n\nimport FormGeneratorFormField from './FormGeneratorFormField.vue'\nimport FormGeneratorLabel from './FormGeneratorLabel.vue'\nimport FormGeneratorHelp from './FormGeneratorHelp.vue'\nimport FormGeneratorError from './FormGeneratorError.vue'\n\nexport default Vue.extend({\n  name: 'FormGeneratorCheckbox',\n  components: {\n    FormGeneratorFormField,\n    FormGeneratorLabel,\n    FormGeneratorHelp,\n    FormGeneratorError\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    value: {\n      type: Boolean,\n      default: false\n    },\n    errors: {\n      type: Array as () => ErrorMessages,\n      default: () => []\n    },\n    label: {\n      type: String,\n      default: ''\n    },\n    text: {\n      type: String,\n      default: ''\n    },\n    formGroupClassName: {\n      type: String,\n      default: ''\n    },\n    placeholder: {\n      type: String,\n      default: ''\n    },\n    help: {\n      type: String,\n      default: ''\n    },\n    required: {\n      type: Boolean,\n      default: true\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    return {\n      checked: false\n    }\n  },\n  watch: {\n    value: {\n      handler (value) {\n        this.checked = Boolean(value)\n        this.setValue(this.checked)\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    onChange (event: InputEvent) {\n      const target = event.target as HTMLInputElement\n      this.setValue(target.checked)\n    },\n    setValue (value: boolean) {\n      this.$emit('update:value', value)\n      this.$emit('input', value)\n    }\n  }\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.form-generator-checkbox {\n  .checkbox {\n    position: relative;\n    display: inline-block;\n    backface-visibility: hidden;\n    outline: 0;\n    vertical-align: initial;\n    font-style: normal;\n    min-height: 16px;\n    font-size: 16px;\n    line-height: 16px;\n    min-width: 16px;\n\n    &__input {\n      cursor: pointer;\n      position: absolute;\n      top: 0;\n      left: 0;\n      opacity: 0;\n      outline: none;\n      width: 0;\n      height: 0;\n      margin: 0;\n      padding: 0;\n\n      &:checked {\n        & + .checkbox__label {\n          &::before {\n            background-color: #f0702f;\n            border: 1px solid #f0702f;\n          }\n\n          &::after {\n            display: block;\n          }\n        }\n      }\n    }\n\n    &__label {\n      position: relative;\n      display: block;\n      padding-left: 30px;\n      outline: 0;\n      font-size: 14px;\n      color: rgba(0, 0, 0, .87);\n      transition: color .1s ease;\n      cursor: pointer;\n      user-select: none;\n      min-height: 16px;\n\n      &::before,\n      &::after {\n        content: \"\";\n        transition: border .1s ease, opacity .1s ease, transform .1s ease, box-shadow .1s ease;\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 16px;\n        height: 16px;\n        background-color: #fff;\n        border: 1px solid #b2b2b2;\n        border-radius: 3px;\n      }\n\n      &::after {\n        display: none;\n        background: transparent;\n        width: 5px;\n        height: 10px;\n        border: 1px solid #fff;\n        border-width: 0 2px 2px 0;\n        transform: rotate(45deg);\n        margin: 2px 0 0 6px;\n        border-radius: 0;\n      }\n    }\n  }\n}\n</style>\n","<template>\n  <form-generator-form-field\n    :class-name=\"formGroupClassName\"\n    class=\"form-generator-collection\"\n  >\n    <form-generator-label\n      :for-input=\"id\"\n      :label=\"label\"\n      :required=\"false\"\n      class=\"form-generator-collection__label\"\n    />\n    <form-generator-help\n      :help=\"help\"\n    />\n    <div class=\"form-generator-collection__items\">\n      <div\n        v-for=\"(item, index) in value\"\n        :key=\"index\"\n        class=\"form-generator-collection__item collection-item\"\n      >\n        <form-generator\n          :id=\"getFormGeneratorId(index)\"\n          :model=\"item\"\n          :schema=\"schema\"\n          :errors=\"getFormGeneratorErrors(index)\"\n          @update:model=\"onItemModelUpdate(index, $event)\"\n        />\n        <div\n          v-if=\"isDeleteAllowed\"\n          class=\"collection-item__actions\"\n        >\n          <button\n            type=\"button\"\n            class=\"form-generator-collection__btn btn-delete\"\n            @click.prevent=\"onDeleteButtonClick(index)\"\n          >\n            {{ deleteButtonLabel }}\n          </button>\n        </div>\n      </div>\n      <button\n        v-if=\"isAddAllow\"\n        type=\"button\"\n        class=\"form-generator-collection__btn btn-add\"\n        @click.prevent=\"onAddButtonClick\"\n      >\n        {{ addButtonLabel }}\n      </button>\n    </div>\n  </form-generator-form-field>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\nimport get from 'lodash/get'\nimport set from 'lodash/set'\nimport cloneDeep from 'lodash/cloneDeep'\n\nimport { Schema, Errors, Model } from '../types'\n\nimport FormGenerator from './FormGenerator.vue'\nimport FormGeneratorFormField from './FormGeneratorFormField.vue'\nimport FormGeneratorLabel from './FormGeneratorLabel.vue'\nimport FormGeneratorHelp from './FormGeneratorHelp.vue'\n\nexport default Vue.extend({\n  name: 'FormGeneratorCollection',\n  components: {\n    FormGenerator,\n    FormGeneratorFormField,\n    FormGeneratorLabel,\n    FormGeneratorHelp\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    value: {\n      type: Array as () => Model[],\n      required: true\n    },\n    errors: {\n      type: Array as () => Errors[],\n      default: () => []\n    },\n    schema: {\n      type: Array as () => Schema,\n      required: true\n    },\n    label: {\n      type: String,\n      default: ''\n    },\n    formGroupClassName: {\n      type: String,\n      default: ''\n    },\n    help: {\n      type: String,\n      default: ''\n    },\n    required: {\n      type: Boolean,\n      default: true\n    },\n    isAddAllow: {\n      type: Boolean,\n      default: false\n    },\n    addButtonLabel: {\n      type: String,\n      default: 'Add new'\n    },\n    isDeleteAllowed: {\n      type: Boolean,\n      default: false\n    },\n    deleteButtonLabel: {\n      type: String,\n      default: 'Delete'\n    }\n  },\n  methods: {\n    getFormGeneratorId (index: number): string {\n      return `${this.id}-${index}`\n    },\n    getFormGeneratorErrors (index: number): Errors {\n      return get(this.errors, index, {})\n    },\n    updateValue (value: Model[]) {\n      this.$emit('update:value', value)\n      this.$emit('input', value)\n    },\n    onItemModelUpdate (index: number, value: Model) {\n      const clonedValue = cloneDeep(this.value)\n\n      set(clonedValue, index, value)\n\n      this.updateValue(clonedValue)\n    },\n    onDeleteButtonClick (index: number) {\n      const clonedValue = cloneDeep(this.value)\n\n      clonedValue.splice(index, 1)\n\n      this.updateValue(clonedValue)\n    },\n    onAddButtonClick () {\n      const clonedValue = cloneDeep(this.value)\n\n      const defaultItem = {}\n      Object.values(this.schema).forEach((field) => {\n        set(defaultItem, field.path, field.params.default || '')\n      })\n\n      clonedValue.push(defaultItem)\n\n      this.updateValue(clonedValue)\n    }\n  }\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.form-generator-collection {\n  &__label {\n    margin-bottom: 15px;\n  }\n\n  &__btn {\n    border-radius: 4px;\n    background-image: linear-gradient(to left, #9e9e9e, #b5b5b5);\n    font-size: 14px;\n    font-weight: bold;\n    letter-spacing: 0.88px;\n    color: #fff;\n    text-align: center;\n    border: none;\n    padding: 5px 10px;\n  }\n\n  .btn-add {\n    background-image: linear-gradient(to left, #329235, #41a544);\n  }\n\n  .btn-delete {\n    background-image: linear-gradient(to left, #d84727, #de5638);\n  }\n\n  .collection-item {\n    &__actions {\n      text-align: right;\n    }\n\n    &::v-deep {\n      .form-generator-form-field {\n        padding: 0;\n      }\n    }\n  }\n}\n</style>\n","<template>\n  <div class=\"form-generator-divider\" />\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\n\nexport default Vue.extend({\n  name: 'FormGeneratorDivider'\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.form-generator-divider {\n  width: 100%;\n  height: 1px;\n  background-color: #e3e3e3;\n  margin-bottom: 20px;\n}\n</style>\n","<template>\n  <form-generator-form-field\n    :class-name=\"formGroupClassName\"\n    class=\"form-generator-text\"\n  >\n    <form-generator-label\n      :for-input=\"id\"\n      :label=\"label\"\n      :required=\"required\"\n    />\n    <input\n      :id=\"id\"\n      :type=\"type\"\n      :placeholder=\"placeholder\"\n      :value=\"value\"\n      :readonly=\"readonly\"\n      :disabled=\"disabled\"\n      :autocomplete=\"autocomplete\"\n      class=\"form-generator-text__input\"\n      @input=\"onInput\"\n    >\n    <form-generator-help\n      :help=\"help\"\n    />\n    <form-generator-error\n      :errors=\"errors\"\n    />\n  </form-generator-form-field>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\n\nimport { ErrorMessages } from '../types'\n\nimport FormGeneratorFormField from './FormGeneratorFormField.vue'\nimport FormGeneratorLabel from './FormGeneratorLabel.vue'\nimport FormGeneratorHelp from './FormGeneratorHelp.vue'\nimport FormGeneratorError from './FormGeneratorError.vue'\n\nexport default Vue.extend({\n  name: 'FormGeneratorInput',\n  components: {\n    FormGeneratorFormField,\n    FormGeneratorLabel,\n    FormGeneratorHelp,\n    FormGeneratorError\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    value: {\n      type: [String, Number] as ((() => string) | (() => number))[],\n      default: ''\n    },\n    errors: {\n      type: Array as () => ErrorMessages,\n      default: () => []\n    },\n    type: {\n      type: String as () => 'text' | 'email' | 'number' | 'password',\n      default: 'text',\n      validator (value) {\n        const allowedTypes = [\n          'text',\n          'email',\n          'number',\n          'password'\n        ]\n\n        return allowedTypes.includes(`${value}`)\n      }\n    },\n    label: {\n      type: String,\n      default: ''\n    },\n    formGroupClassName: {\n      type: String,\n      default: ''\n    },\n    placeholder: {\n      type: String,\n      default: ''\n    },\n    help: {\n      type: String,\n      default: ''\n    },\n    required: {\n      type: Boolean,\n      default: true\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    autocomplete: {\n      type: String,\n      default: 'on'\n    }\n  },\n  methods: {\n    onInput (event: InputEvent) {\n      const target = event.target as HTMLInputElement\n\n      this.$emit('update:value', target.value)\n      this.$emit('input', target.value)\n    }\n  }\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.form-generator-text {\n  &__input {\n    height: 37px;\n    width: 100%;\n    border-radius: 4px;\n    border: solid 1px #d2d2d2;\n    padding: 0 10px;\n    box-sizing: border-box;\n\n    &::placeholder {\n      opacity: 0.5;\n      font-size: 14px;\n      letter-spacing: 0.3px;\n    }\n  }\n}\n</style>\n","<template>\n  <form-generator-form-field\n    :class-name=\"formGroupClassName\"\n    class=\"form-generator-radio\"\n  >\n    <form-generator-label\n      :for-input=\"id\"\n      :label=\"label\"\n      :required=\"required\"\n    />\n    <div class=\"radio-buttons\">\n      <label\n        v-for=\"option in options\"\n        :key=\"option.value\"\n        class=\"radio-button\"\n      >\n        <input\n          :value=\"option.value\"\n          :checked=\"option.value === value\"\n          :disabled=\"disabled\"\n          type=\"radio\"\n          class=\"radio-button__input\"\n          @change=\"onChange\"\n        >\n        <span class=\"radio-button__title\">\n          {{ option.label }}\n        </span>\n      </label>\n    </div>\n    <form-generator-help\n      :help=\"help\"\n    />\n    <form-generator-error\n      :errors=\"errors\"\n    />\n  </form-generator-form-field>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\n\nimport { ErrorMessages, RadioOptions } from '../types'\n\nimport FormGeneratorFormField from './FormGeneratorFormField.vue'\nimport FormGeneratorLabel from './FormGeneratorLabel.vue'\nimport FormGeneratorHelp from './FormGeneratorHelp.vue'\nimport FormGeneratorError from './FormGeneratorError.vue'\n\nexport default Vue.extend({\n  name: 'FormGeneratorRadio',\n  components: {\n    FormGeneratorFormField,\n    FormGeneratorLabel,\n    FormGeneratorHelp,\n    FormGeneratorError\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    value: {\n      type: [String, Number] as ((() => string) | (() => number))[],\n      default: ''\n    },\n    errors: {\n      type: Array as () => ErrorMessages,\n      default: () => []\n    },\n    label: {\n      type: String,\n      default: ''\n    },\n    options: {\n      type: Array as () => RadioOptions,\n      required: true\n    },\n    formGroupClassName: {\n      type: String,\n      default: ''\n    },\n    help: {\n      type: String,\n      default: ''\n    },\n    required: {\n      type: Boolean,\n      default: true\n    },\n    disabled: {\n      type: Boolean,\n      default: true\n    }\n  },\n  methods: {\n    onChange (event: InputEvent) {\n      const target = event.target as HTMLInputElement\n\n      this.$emit('update:value', target.value)\n      this.$emit('input', target.value)\n    }\n  }\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.form-generator-radio {\n  .radio-button {\n    font-size: 14px;\n    margin: 0;\n\n    &:hover {\n      cursor: pointer;\n    }\n\n    &:not(:last-child) {\n      margin-right: 35px;\n    }\n\n    &__input {\n      position: absolute;\n      z-index: -1;\n      opacity: 0;\n      margin: 0;\n\n      &:checked + .radio-button__title::after {\n        opacity: 1;\n      }\n\n      &:checked + .radio-button__title::before {\n        border-color: #f27023;\n        background: #f27023;\n      }\n    }\n\n    &__title {\n      position: relative;\n      padding: 0 0 0 25px;\n\n      &::before {\n        content: '';\n        position: absolute;\n        top: 50%;\n        transform: translateY(-50%);\n        left: 0;\n        width: 16px;\n        height: 16px;\n        border: 1px solid #b2b2b2;\n        border-radius: 50%;\n        background: #fff;\n      }\n\n      &::after {\n        content: '';\n        position: absolute;\n        top: 50%;\n        transform: translateY(-50%);\n        left: 5px;\n        width: 6px;\n        height: 6px;\n        border-radius: 50%;\n        background: #fff;\n        opacity: 0;\n        transition: 0.2s;\n      }\n    }\n  }\n}\n</style>\n","<template>\n  <form-generator-form-field\n    :class-name=\"formGroupClassName\"\n    class=\"form-generator-select\"\n  >\n    <form-generator-label\n      :for-input=\"id\"\n      :label=\"label\"\n      :required=\"required\"\n    />\n    <select\n      v-model=\"computedValue\"\n      :disabled=\"disabled\"\n      class=\"form-generator-select__select\"\n    >\n      <option value=\"\">\n        {{ placeholder }}\n      </option>\n      <option\n        v-for=\"option in selectOptions\"\n        :key=\"option.value\"\n        :value=\"option.value\"\n      >\n        {{ option.label }}\n      </option>\n    </select>\n    <form-generator-help\n      :help=\"help\"\n    />\n    <form-generator-error\n      :errors=\"errors\"\n    />\n  </form-generator-form-field>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\n\nimport { ErrorMessages, SelectOptions } from '../types'\n\nimport FormGeneratorFormField from './FormGeneratorFormField.vue'\nimport FormGeneratorLabel from './FormGeneratorLabel.vue'\nimport FormGeneratorHelp from './FormGeneratorHelp.vue'\nimport FormGeneratorError from './FormGeneratorError.vue'\n\nexport default Vue.extend({\n  name: 'FormGeneratorSelect',\n  components: {\n    FormGeneratorFormField,\n    FormGeneratorLabel,\n    FormGeneratorHelp,\n    FormGeneratorError\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    value: {\n      type: [String, Number] as ((() => string) | (() => number))[],\n      default: ''\n    },\n    errors: {\n      type: Array as () => ErrorMessages,\n      default: () => []\n    },\n    label: {\n      type: String,\n      default: ''\n    },\n    options: {\n      type: [Array, Function] as ((() => SelectOptions) | (() => () => Promise<SelectOptions>))[],\n      required: true\n    },\n    formGroupClassName: {\n      type: String,\n      default: ''\n    },\n    placeholder: {\n      type: String,\n      default: 'Please select'\n    },\n    help: {\n      type: String,\n      default: ''\n    },\n    required: {\n      type: Boolean,\n      default: true\n    },\n    disabled: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data () {\n    return {\n      selectOptions: [] as SelectOptions\n    }\n  },\n  computed: {\n    computedValue: {\n      get (): string | number {\n        return this.value\n      },\n      set (value: string | number) {\n        this.$emit('update:value', value)\n        this.$emit('change', value)\n      }\n    }\n  },\n  watch: {\n    options: {\n      async handler (options) {\n        if (typeof options === 'function') {\n          this.selectOptions = await options()\n        } else {\n          this.selectOptions = options\n        }\n      },\n      immediate: true\n    }\n  }\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.form-generator-select {\n  &__select {\n    height: 37px;\n    width: 100%;\n    border-radius: 4px;\n    border: solid 1px #d2d2d2;\n    padding: 0 10px;\n    background: #fff;\n\n    &::placeholder {\n      opacity: 0.5;\n      font-size: 14px;\n      letter-spacing: 0.3px;\n    }\n  }\n}\n</style>\n","<template>\n  <form-generator-form-field\n    :class-name=\"formGroupClassName\"\n    class=\"form-generator-textarea\"\n  >\n    <form-generator-label\n      :for-input=\"id\"\n      :label=\"label\"\n      :required=\"required\"\n    />\n    <textarea\n      :id=\"id\"\n      :placeholder=\"placeholder\"\n      :value=\"value\"\n      :readonly=\"readonly\"\n      :disabled=\"disabled\"\n      class=\"form-generator-textarea__input\"\n      @input=\"onInput\"\n      @keyup.enter.stop=\"\"\n    />\n    <form-generator-help\n      :help=\"help\"\n    />\n    <form-generator-error\n      :errors=\"errors\"\n    />\n  </form-generator-form-field>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\n\nimport { ErrorMessages } from '../types'\n\nimport FormGeneratorFormField from './FormGeneratorFormField.vue'\nimport FormGeneratorLabel from './FormGeneratorLabel.vue'\nimport FormGeneratorHelp from './FormGeneratorHelp.vue'\nimport FormGeneratorError from './FormGeneratorError.vue'\n\nexport default Vue.extend({\n  name: 'FormGeneratorTextarea',\n  components: {\n    FormGeneratorFormField,\n    FormGeneratorLabel,\n    FormGeneratorHelp,\n    FormGeneratorError\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    value: {\n      type: [String, Number] as ((() => string) | (() => number))[],\n      default: ''\n    },\n    errors: {\n      type: Array as () => ErrorMessages,\n      default: () => []\n    },\n    label: {\n      type: String,\n      default: ''\n    },\n    formGroupClassName: {\n      type: String,\n      default: ''\n    },\n    placeholder: {\n      type: String,\n      default: ''\n    },\n    help: {\n      type: String,\n      default: ''\n    },\n    required: {\n      type: Boolean,\n      default: true\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  methods: {\n    onInput (event: InputEvent) {\n      const target = event.target as HTMLInputElement\n\n      this.$emit('update:value', target.value)\n      this.$emit('input', target.value)\n    }\n  }\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.form-generator-textarea {\n  &__input {\n    height: 37px;\n    width: 100%;\n    max-width: 100%;\n    border-radius: 4px;\n    border: solid 1px #d2d2d2;\n    padding: 10px;\n    box-sizing: border-box;\n\n    &::placeholder {\n      opacity: 0.5;\n      font-size: 14px;\n      letter-spacing: 0.3px;\n    }\n  }\n}\n</style>\n","import forIn from 'lodash/forIn'\nimport isObject from 'lodash/isObject'\nimport isArray from 'lodash/isArray'\nimport { Model } from '../types'\n\nfunction attachPropertyValueToFormData (formData: FormData, property: string, value: unknown, formPrefix = ''): void {\n  const fullProperty = formPrefix.length ? `${formPrefix}[${property}]` : property\n\n  if (isObject(value) || isArray(value)) {\n    forIn(value, (subValue, subProperty) => {\n      attachPropertyValueToFormData(formData, subProperty, subValue, fullProperty)\n    })\n  } else {\n    formData.append(fullProperty, value !== null ? `${value}` : '')\n  }\n}\n\nexport function toFormData (object: Model, formPrefix = ''): FormData {\n  const formData = new FormData()\n\n  forIn(object, function (value, property) {\n    attachPropertyValueToFormData(formData, property, value, formPrefix)\n  })\n\n  return formData\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAtsCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAtCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC8CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA9CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC2CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA3CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACqCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EArCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECGA,SAAS,6BAA6B,CAAE,QAAkB,EAAE,QAAgB,EAAE,KAAc,EAAE,UAAU,GAAG,EAAE;MAC3G,MAAM,YAAY,GAAG,UAAU,CAAC,MAAM,GAAG,GAAG,UAAU,IAAI,QAAQ,GAAG,GAAG,QAAQ,CAAA;MAEhF,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE;UACrC,KAAK,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE,WAAW;cACjC,6BAA6B,CAAC,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAA;WAC7E,CAAC,CAAA;OACH;WAAM;UACL,QAAQ,CAAC,MAAM,CAAC,YAAY,EAAE,KAAK,KAAK,IAAI,GAAG,GAAG,KAAK,EAAE,GAAG,EAAE,CAAC,CAAA;OAChE;EACH,CAAC;WAEe,UAAU,CAAE,MAAa,EAAE,UAAU,GAAG,EAAE;MACxD,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAA;MAE/B,KAAK,CAAC,MAAM,EAAE,UAAU,KAAK,EAAE,QAAQ;UACrC,6BAA6B,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,CAAC,CAAA;OACrE,CAAC,CAAA;MAEF,OAAO,QAAQ,CAAA;EACjB;;;;;;;;;;;;;;;;;;;;;;;;;;"}